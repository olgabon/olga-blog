{
    "data": [
      {
        "id": 1,
        "title": "JavaScript Array Methods Cheat Sheet",
        "description": "Some useful JavaScript Array Methods which are good to be remembered",
        "image": "../../../assets/Javascript-Array-Methods.png",
        "imageDescription": "some value",
        "date": 1621010661866,
        "text": "<div class=\"article\"><p>While working on different JavaScript projects I collected a bunch of useful JavaScript Array Methods which I am using from time to time but keep forgetting them. Some of them are more specific and some are more suitable depending on the situation, some I haven’t used yet but it’s good to know that they exist and I can always refresh them in my mind when I come back to this post.</p><h3>.slice()</h3><p>Accesses a subsection of an array, takes as an argument the index to start from. Arguments can be positive as well as negative.</p><div class=\"code\"><span>[10,20,30].slice(1);</span><p>Result: [20, 30]</p> <span>[10,20,30].slice(1, 2);</span><p>Result: [20]</p><span>[10, 20, 30, 40, 50].slice(-2);</span><p>Result: [40, 50]</p></div><div class=\"new-section\"><h3>.join ()</h3><p>Turns an array of strings into a single string.</p><div class=\"code\"><span>['a', 'b', 'c'].join('x');</span><p>Result: 'axbxc'</p> <span>['Olga', 'Rick'].join();</span><p>Result: 'Olga,Rick'</p></div><h3>.filter()</h3><p>Creates a new array with all elements that pass the test implemented by the provided function.</p><div class=\"code\"><span>const users = [<br><span class=\"side-space\"></span>{name: 'Olga', admin: true},<br><span class=\"side-space\"></span>{name: 'Rick', admin: false}<br>];<br>users.filter(user => user.admin);</span><p>Result: [{name: 'Olga', admin: true}</p></div><h3>.flat()</h3><p>\"Flattens\" nested arrays into a single array </p><div class=\"code\"><span>[<br><span class=\"side-space\"></span>[1, 2],<br><span class=\"side-space\"></span>[3, 4]<br>].flat();</span><p>Result: [1, 2, 3, 4]</p><span>[<br><span class=\"side-space\"></span>[1, 2],<br><span class=\"side-space\"></span>[<br><span class=\"double-side-space\"></span>3,<br><span class=\"double-side-space\"></span>[4]<br><span class=\"side-space\"></span>]<br>].flat(2);</span><p>Result: [1, 2, 3, 4]</p><span>[[[[[[[[[[[[[[1]]]]]]]]]]]]]].flat(Infinity);</span><p>Result: [1]</p><span>[<br><span class=\"side-space\"></span>[1, 2],<br><span class=\"side-space\"></span>{name: 'Olga', postIds: [77, 192]}<br>].flat(Infinity);</span><p>Result: [1, 2, {name: 'Olga', postIds: [77, 192]}]</p></div><h3>.reduce()</h3><p>Executes a reducer function on each element of the array, resulting in a single output value.</p><div class=\"code\"><span>[1, 20, 300, 4000].reduce((sum, current) => sum + current, 0);</span><p>Result: 4321</p><span>const intermediateSums = [];<br>[1, 20, 300, 4000].reduce(<br><span class=\"side-space\"></span>(sum, current) => {<br><span class=\"double-side-space\"></span>sum = sum + current;<br><span class=\"double-side-space\"></span>intermediateSums.push(sum);<br><span class=\"double-side-space\"></span>return sum;<br><span class=\"side-space\"></span>}<br>);<br>intermediateSums;</span><p>Result: [21, 321, 4321]</p></div><h3>.splice()</h3><p>Changes the contents of an array by removing or replacing existing elements and/or adding new elements.</p><div class=\"code\"><span>var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];<br>fruits.splice(2, 1, \"Pear\", \"Kiwi\")<br>console.log(fruits)</span><p>Result: [\"Banana\", \"Orange\", \"Pear\", \"Kiwi\", \"Mango\"]</p><span>let myFish = [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"]<br>let removed = myFish.splice(-2, 1)<br>console.log(myFish)</span><p>Result: [\"angel\", \"clown\", \"sturgeon\"]</p></div><h3>.map() </h3><p>Calls a function on each element of an array. It returns a new array of the values returned from those function calls.</p><div class=\"code\"><span>[1, 2, 3].map(num => num * 10);</span><p>Result: [10, 20, 30]</p><span>const myUsers = [<br><span class=\"side-space\"></span>{ name: 'shark', likes: 'ocean' },<br><span class=\"side-space\"></span>{ name: 'turtle', likes: 'pond' },<br><span class=\"side-space\"></span>{ name: 'otter', likes: 'fish biscuits' }<br>]<br>const usersByLikes = myUsers.map(item => {<br><span class=\"side-space\"></span>const container = {};<br><span class=\"side-space\"></span>container[item.name] = item.likes;<br><span class=\"side-space\"></span>container.age = item.name.length * 10;<br><span class=\"side-space\"></span>return container;<br>})<br>console.log(usersByLikes);</span><p>Result: [<br><span class=\"side-space\"></span>{age: 50, shark: \"ocean\"},<br><span class=\"side-space\"></span>{age: 60, turtle: \"pond\"},<br><span class=\"side-space\"></span>{age: 50, otter: \"fish biscuits\"}<br>]</p></div></div>"
      },
      {
        "id": 2,
        "title": "Java Script Array Methods Cheat Sheet",
        "description": "The best football team in the world!",
        "image": "../../../assets/1_yMzqAnPn-l1-P3-SuHg6fg.jpeg",
        "imageDescription": "some value",
        "date": 1621010661866,
        "text": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."
      }
    ]
  }