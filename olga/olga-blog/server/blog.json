{
    "data": [
      {
        "id": 1,
        "title": "JavaScript Array Methods Cheat Sheet",
        "description": "Some useful JavaScript Array Methods which are good to be remembered",
        "image": "../../../assets/Javascript-Array-Methods.png",
        "imageDescription": "JavaScript Array Methods",
        "date": 1621010661866,
        "text": "<div class=\"article\"><p>While working on different JavaScript projects I collected a bunch of useful JavaScript Array Methods which I am using from time to time but keep forgetting them. Some of them are more specific and some are more suitable depending on the situation, some I haven’t used yet but it’s good to know that they exist and I can always refresh them in my mind when I come back to this post.</p><h3>.slice()</h3><p>Accesses a subsection of an array, takes as an argument the index to start from. Arguments can be positive as well as negative.</p><div class=\"code\"><span>[10,20,30].slice(1);</span><p>Result: [20, 30]</p> <span>[10,20,30].slice(1, 2);</span><p>Result: [20]</p><span>[10, 20, 30, 40, 50].slice(-2);</span><p>Result: [40, 50]</p></div><div class=\"new-section\"><h3>.join ()</h3><p>Turns an array of strings into a single string.</p><div class=\"code\"><span>['a', 'b', 'c'].join('x');</span><p>Result: 'axbxc'</p> <span>['Olga', 'Rick'].join();</span><p>Result: 'Olga,Rick'</p></div><h3>.filter()</h3><p>Creates a new array with all elements that pass the test implemented by the provided function.</p><div class=\"code\"><span>const users = [<br><span class=\"side-space\"></span>{name: 'Olga', admin: true},<br><span class=\"side-space\"></span>{name: 'Rick', admin: false}<br>];<br>users.filter(user => user.admin);</span><p>Result: [{name: 'Olga', admin: true}</p></div><h3>.flat()</h3><p>\"Flattens\" nested arrays into a single array </p><div class=\"code\"><span>[<br><span class=\"side-space\"></span>[1, 2],<br><span class=\"side-space\"></span>[3, 4]<br>].flat();</span><p>Result: [1, 2, 3, 4]</p><span>[<br><span class=\"side-space\"></span>[1, 2],<br><span class=\"side-space\"></span>[<br><span class=\"double-side-space\"></span>3,<br><span class=\"double-side-space\"></span>[4]<br><span class=\"side-space\"></span>]<br>].flat(2);</span><p>Result: [1, 2, 3, 4]</p><span>[[[[[[[[[[[[[[1]]]]]]]]]]]]]].flat(Infinity);</span><p>Result: [1]</p><span>[<br><span class=\"side-space\"></span>[1, 2],<br><span class=\"side-space\"></span>{name: 'Olga', postIds: [77, 192]}<br>].flat(Infinity);</span><p>Result: [1, 2, {name: 'Olga', postIds: [77, 192]}]</p></div><h3>.reduce()</h3><p>Executes a reducer function on each element of the array, resulting in a single output value.</p><div class=\"code\"><span>[1, 20, 300, 4000].reduce((sum, current) => sum + current, 0);</span><p>Result: 4321</p><span>const intermediateSums = [];<br>[1, 20, 300, 4000].reduce(<br><span class=\"side-space\"></span>(sum, current) => {<br><span class=\"double-side-space\"></span>sum = sum + current;<br><span class=\"double-side-space\"></span>intermediateSums.push(sum);<br><span class=\"double-side-space\"></span>return sum;<br><span class=\"side-space\"></span>}<br>);<br>intermediateSums;</span><p>Result: [21, 321, 4321]</p></div><h3>.splice()</h3><p>Changes the contents of an array by removing or replacing existing elements and/or adding new elements.</p><div class=\"code\"><span>var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];<br>fruits.splice(2, 1, \"Pear\", \"Kiwi\")<br>console.log(fruits)</span><p>Result: [\"Banana\", \"Orange\", \"Pear\", \"Kiwi\", \"Mango\"]</p><span>let myFish = [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"]<br>let removed = myFish.splice(-2, 1)<br>console.log(myFish)</span><p>Result: [\"angel\", \"clown\", \"sturgeon\"]</p></div><h3>.map() </h3><p>Calls a function on each element of an array. It returns a new array of the values returned from those function calls.</p><div class=\"code\"><span>[1, 2, 3].map(num => num * 10);</span><p>Result: [10, 20, 30]</p><span>const myUsers = [<br><span class=\"side-space\"></span>{ name: 'shark', likes: 'ocean' },<br><span class=\"side-space\"></span>{ name: 'turtle', likes: 'pond' },<br><span class=\"side-space\"></span>{ name: 'otter', likes: 'fish biscuits' }<br>]<br>const usersByLikes = myUsers.map(item => {<br><span class=\"side-space\"></span>const container = {};<br><span class=\"side-space\"></span>container[item.name] = item.likes;<br><span class=\"side-space\"></span>container.age = item.name.length * 10;<br><span class=\"side-space\"></span>return container;<br>})<br>console.log(usersByLikes);</span><p>Result: [<br><span class=\"side-space\"></span>{age: 50, shark: \"ocean\"},<br><span class=\"side-space\"></span>{age: 60, turtle: \"pond\"},<br><span class=\"side-space\"></span>{age: 50, otter: \"fish biscuits\"}<br>]</p></div></div>"
      },
      {
        "id": 2,
        "title": "Great Git Commands Every Developer Should Know",
        "description": "Several Git commands which will make your life easier",
        "image": "../../../assets/2255005-637490895323513372-16x9.jpeg",
        "imageDescription": "Git Commands",
        "date": 1622402967216,
        "text": "<div class=\"article\"> <p>While working as a Front-end developer I have collected some useful Git commands which I tend to forget. As the time passes by I would like to keep them all in one place. So this is what this blog post is going to be about!</p><h3>Git merge </h3><p>Git merge basically integrates your feature branch with all of its commits back to the dev (or master) branch. It's important to remember that you first need to be on the specific branch that you want to merge with your feature branch. </p><div class=\"code\"><span>git checkout dev</span><br><p>Check out to your branch</p><span>git pull</span><br><p>Pulls latest changes on the branch</p><span>git merge branch_name</span><br><p>Merges the selected branch into the one you checked out to</p></div><h3>Git branch</h3><p>Git branch exposes all the branches which were created locally. This command also allows you to create and delete local branches.</p><div class=\"code\"><span>git branch</span><span>git checkout -b branch_name</span><p>The command above creates a new branch and also checks out to it</p><span>git branch -d branch_name </span><p>This command deletes the branch locally</p><span>git push origin --delete remote_branch_name</span><p>This command deletes the branch remote branch (the one on Git)</p></div><h3>Git stash</h3><p>Git stash takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy. Stashing is handy if you need to quickly switch context and work on something else, but you are mid-way through a code change and aren't quite ready to commit. It doesn’t keep the changes made after</p><div class=\"code\"><span>git stash</span><p>This command is used to stash the changes</p><span>git stash pop</span><p>Removes the changes from stash and reapplies them to working copy</p></div><h3>Git submodule</h3><p>Git submodule is a great way to divide a big project in smaller chunks which can be better maintained and tracked by the idea they are responsible for.  Submodules run under parent project, however they have a separate repository on Git. So, once you work on the submodule, your commit will be added to the repository your submodule belongs to and not to the parent. Below are useful  command for the git submodules.</p><div class=\"code\"><span>git branch</span><span>git submodule update --init --remote </span><p>It pulls the changes from original submodule repositories</p><span>git submodule foreach git pull origin branch_name</span><p>It updates all the submodules in the project on the branch it was pulled from</p></div></div>"
      }
    ]
  }